#!/usr/bin/env python

##
# @file main
# @brief the primary script for the test harnesses used to launch all tests
#
#   This script is the primary script for the test harness. It creates the 
#   interaction objects, sets up proper source objects, creates and calls each
#   test and updates and pushes the result back out whichever process is 
#   waiting to collect it.
#
# @author Adam Koehler
# @date November 8, 2012
# @udpated January 31, 2013
#

import json
import sys
from galah.interact import *
from system.testfile import *

# create configuration object from Galah provided JSON file
config = GalahConfig().from_file()

# TODO: should this be be within the setup of the configuration
sys.path.append(config.harness_directory)

# generic return values
OK = 0
ERROR = -1

##
# create Galah result object 
#
result = GalahResult()


##
# create source file object and initialize values
# this test is required as set up to all other tests and thus cannot be
# removed from within the configurable actions list
#
source = SourceFile()

# determine if source file exists
name = "Source File Exist"

# create test object
t = GalahTest()
t.name = name
 
# determine where the source is by running its test
import system.findsource as findsource
source_exist = findsource.test((config.testables_directory, config.harness_directory), t, source, True)

# split the file into code, header and comments
if source_exist:
    source.split_file()
    source.determine_indent_size()

# add test to result so feedback exists stating which file was tested if any
result.add_test(t)

# TODO: remove this list creation once actions are activated in Galah
config.actions = ["Submit Date Check", "File Name Check", "File Header Check", "Coding Style Check", "Compilation Check", "Indent Command Execution"]

# nothing can be done if no source file was discovered
if source_exist: 
    ##
    # run test if it is within the configuration actions
    #
    name = "Submit Date Check"
    if name in config.actions:
        # create test object
        t = GalahTest()
        t.name = name
         
        # run test
        import modules.latecheck as latecheck
        completed = latecheck.test((config.testables_directory, config.harness_directory), t, config.submission["timestamp"], config.assignment["due"])
        
        # add test to result
        if completed == OK:
            result.add_test(t)
    
    
    name = "File Name Check"
    if name in config.actions:
        # create test object
        t = GalahTest()
        t.name = name
         
        # run test
        import modules.filename as filename
        completed = filename.test((config.testables_directory, config.harness_directory), t)
        
        # add test to result
        if completed == OK:
            result.add_test(t)
    
    
    name = "File Header Check"
    if name in config.actions:
        # create test object
        t = GalahTest()
        t.name = name
         
        # run test
        import modules.headercheck as headercheck
        completed = headercheck.test((config.testables_directory, config.harness_directory), t, source, config.submission)
        
        # add test to result
        if completed == OK:
            result.add_test(t)
    
    
    name = "Coding Style Check"
    if name in config.actions:
        # create test object
        t = GalahTest()
        t.name = name
         
        # run test
        from modules.style import stylecheck as stylecheck
        completed = stylecheck.test((config.testables_directory, config.harness_directory), t, source)
        
        # add test to result
        if completed == OK:
            result.add_test(t)
    
    
    name = "Compilation Check"
    if name in config.actions:
        # create test object
        t = GalahTest()
        t.name = name
         
        # run test
        import modules.compilation as compilation
        completed = compilation.test((config.testables_directory, config.harness_directory), t, source)
        
        # add test to result
        if completed == OK:
            result.add_test(t)
     
     
    name = "Indent Command Execution"
    if name in config.actions:
        # create test object
        t = GalahTest()
        t.name = name
         
        # run test
        import modules.indent as indent
        completed = indent.test((config.testables_directory, config.harness_directory), t, source)
        
        # add test to result
        if completed == OK:
            result.add_test(t)
    


# calculate the scores associated with result based on tests
result.calculate_scores()


# min score of 0
if result.score < 0:
    result.score = 0

# TODO: should markup conversion occur all at once?
# convert all test messages to have proper markdown for newlines
from system.utils import markup_convert_newline
for test in result.tests:
    test.message = markup_convert_newline(test.message)
    

# send result back to Galah 
result.send()
