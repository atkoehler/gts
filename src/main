#!/usr/bin/env python

##
# @file main
# @brief the primary script for the test harnesses used to launch all tests
#
#   This script is the primary script for the test harness. It creates the 
#   interaction objects, sets up proper source objects, creates and calls each
#   test and updates and pushes the result back out whichever process is 
#   waiting to collect it.
#
# @author Adam Koehler
# @date November 8, 2012
# @udpated January 31, 2013
#

# TODO: figure out the configuration system to get this item from their
GTS_CONFIG_LOC = "assessment/gtsConfig.json"

import os
import json
import sys
from galah.interact import *
from system.testfile import *
from system.config import *

# create configuration object from Galah provided JSON file
config = GalahConfig().from_file()

# TODO: should this be be within the setup of the configuration
sys.path.append(config.harness_directory)

# create configuration object for the test harness 
gtsConfig_file = open(os.path.join(config.harness_directory, GTS_CONFIG_LOC))
gtsConfig = GTSConfig().from_file(gtsConfig_file)

# generic return values
OK = 0
ERROR = -1

# TODO: remove this list creation once actions are activated in Galah
config.actions = ["Submit Date Check", "Proper File Name", "Proper Assessment Header", "Proper Programming Style", "Compilation Check", "Madlibs Output Check"]

##
# create Galah result object 
#
result = GalahResult()


##
# create source file object and initialize values
# this test is required as set up to all other tests and thus cannot be
# removed from within the configurable actions list
#
source = SourceFile()

# determine if source file exists
name = "Source File Exist"

# create test object
t = GalahTest()
t.name = name
 
# determine where the source is by running its test
import system.findsource as findsource
source_exist = findsource.test((config.testables_directory, config.harness_directory), t, source, gtsConfig.environment, True)

# add test to result so feedback exists stating which file was tested if any
result.add_test(t)


# nothing can be done if no source file was discovered
if source_exist:
    # split the file into code, header and comments
    key = "Proper Assessment Header"
    if key in gtsConfig.tests:
        source.split_file(gtsConfig.tests[key]["begin_flag"], 
                          gtsConfig.tests[key]["end_flag"])
    else:
        flag = "slkdjflakejlskma_fake_line_lajdsklfjslkdjflskjd"
        source.split_file(flag, flag)
 
    name = "Proper Assessment Header"
    if name in config.actions and name in gtsConfig.tests:
        # create test object
        t = GalahTest()
        t.name = name
         
        # run test
        import modules.headercheck as headercheck
        completed = headercheck.test((config.testables_directory, config.harness_directory), t, gtsConfig.tests[name], source, config.submission)
        
        proper_header = t.score == t.max_score    
        
        # add test to result
        if completed == OK:
            result.add_test(t)
    else:
        proper_header = False


# nothing can be done if no source file was discovered
# skip these tests if no header was discovered too!
if source_exist and proper_header: 
    # set up items for future tests 
    #determine the default spacing for the file
    name = "Proper Programming Style"
    if name in config.actions and name in gtsConfig.tests:
        source.determine_indent_size(
                        gtsConfig.tests[name]["indent_spaces_default"],
                        gtsConfig.tests[name]["indent_spaces_min"],
                        gtsConfig.tests[name]["indent_spaces_max"])
    else:
        source.determine_indent_size(3, 2, 6)

    # set up a solution source code file
    sol_dir = os.path.join(config.harness_directory, gtsConfig.environment["solution_dir"])
    sol_path = os.path.join(sol_dir, gtsConfig.environment["solution_name"])
    solution = SourceFile()
    solution.name = gtsConfig.environment["solution_name"]
    solution.file_loc = sol_path

    ##
    # run test if it is within the configuration actions
    #

    
    
    name = "Proper File Name"
    if name in config.actions and name in gtsConfig.tests:
        # create test object
        t = GalahTest()
        t.name = name
         
        # run test
        import modules.filename as filename
        completed = filename.test((config.testables_directory, config.harness_directory), t, gtsConfig.tests[name])
        
        # add test to result
        if completed == OK:
            result.add_test(t)
    
    

    
    
    name = "Proper Programming Style"
    if name in config.actions and name in gtsConfig.tests:
        # create test object
        t = GalahTest()
        t.name = name
         
        # run test
        from modules.style import stylecheck as stylecheck
        completed = stylecheck.test((config.testables_directory, config.harness_directory), t, gtsConfig.tests[name], source, gtsConfig.environment)
        
        # add test to result
        if completed == OK:
            result.add_test(t)
    
    
    name = "Compilation Check"
    if name in config.actions and name in gtsConfig.tests:
        # create test object
        t = GalahTest()
        t.name = name
         
        # run test
        import modules.compilation as compilation
        completed = compilation.test((config.testables_directory, config.harness_directory), t, gtsConfig.tests[name],  source, gtsConfig.environment)
        
        # add test to result
        if completed == OK:
            result.add_test(t)
     
     
    name = "Indent Command Execution"
    if name in config.actions and name in gtsConfig.tests:
        # create test object
        t = GalahTest()
        t.name = name
         
        # run test
        import modules.indent as indent
        completed = indent.test((config.testables_directory, config.harness_directory), t, gtsConfig.tests[name], source, gtsConfig.environment)
        
        # add test to result
        if completed == OK:
            result.add_test(t)
    
    name = "Functions Logic Test"
    if name in config.actions and name in gtsConfig.tests:
        for key, value in gtsConfig.units.iteritems():
            fn = gtsConfig.units[key]["name"]
            has_output = gtsConfig.units[key]["has_output"]
            has_input = gtsConfig.units[key]["has_input"]
            subs = gtsConfig.units[key]["tests"]            
            inc_sol = gtsConfig.units[key]["inc_solution_funcs"]
            
            # combine global and unit specific alterations
            import copy
            alterations = {}
            alterations = copy.deepcopy(gtsConfig.alterations)
            for k, v in gtsConfig.units[key]["alterations"].iteritems():
                for addme in v:
                    if k in alterations:
                        alterations[k].append(addme)
            
            for test_name, test_vars in subs.iteritems():
                # set up Galah test based on gtsConfig file
                t = GalahTest()
                files = test_vars["files"]
                if len(subs) == 1:
                    t.name = fn + " logic test"
                else:
                    t.name = fn + " " + test_name + " logic test" 
                if "logic_score" in test_vars:
                    t.max_score = test_vars["logic_score"]
                else:
                    t.max_score = 0
                 
                # run test
                from modules.unittesting import unittest as unittest
                completed = unittest.logictest((config.testables_directory, 
                                            config.harness_directory), 
                                          t, gtsConfig.tests[name], source, 
                                          fn, has_output, has_input, files, 
                                          inc_sol, gtsConfig.environment,
                                          alterations)
            
            # add test to result
            if completed == OK:
                result.add_test(t)
    
    name = "Functions Output Test"
    if name in config.actions and name in gtsConfig.tests:
        for key, value in gtsConfig.units.iteritems():
            fn = gtsConfig.units[key]["name"]
            has_output = gtsConfig.units[key]["has_output"]
            has_input = gtsConfig.units[key]["has_input"]
            subs = gtsConfig.units[key]["tests"]            
            inc_sol = gtsConfig.units[key]["inc_solution_funcs"]
            
            # combine global and unit specific alterations
            import copy
            alterations = {}
            alterations = copy.deepcopy(gtsConfig.alterations)
            for k, v in gtsConfig.units[key]["alterations"].iteritems():
                for addme in v:
                    if k in alterations:
                        alterations[k].append(addme)
            
            for test_name, test_vars in subs.iteritems():
                # set up Galah test based on gtsConfig file
                t = GalahTest()
                files = test_vars["files"]
                if len(subs) == 1:
                    t.name = fn + " output test"
                else:
                    t.name = fn + " " + test_name + " output test" 
                if "output_score" in test_vars:
                    t.max_score = test_vars["output_score"]
                else:
                    t.max_score = 0
                 
                # run test
                from modules.unittesting import unittest as unittest
                completed = unittest.outputtest((config.testables_directory, 
                                                 config.harness_directory), 
                                                t, gtsConfig.tests[name], 
                                                source, solution, fn, 
                                                has_output, has_input, files, 
                                                inc_sol, gtsConfig.environment, 
                                                alterations)
            
            # add test to result
            if completed == OK:
                result.add_test(t)

    name = "Compare Program Output"
    if name in config.actions and name in gtsConfig.tests:
        allTests = gtsConfig.tests[name]["tests"]
        alterations = copy.deepcopy(gtsConfig.alterations)
        
        for indiv_test, vars in allTests.iteritems():
            # create test object
            t = GalahTest()
            t.name = vars["name"]
            t.max_score = vars["max_score"]

            inp_dir = os.path.join(config.harness_directory, 
                                   gtsConfig.environment["inputs_dir"])
            file_paths = []
            for f in vars["files"]:
                file_paths.append(os.path.join(inp_dir, f))
             
            # run test
            import modules.outputcheck as outputcheck
            completed = outputcheck.test((config.testables_directory, 
                                          config.harness_directory), 
                                         t, source, file_paths, 
                                         gtsConfig.environment, alterations)
            
            # add test to result
            if completed == OK:
                result.add_test(t)   

    name = "Madlibs Output Check"
    if name in config.actions and name in gtsConfig.tests:
        # run test, individual test creation handled inside function
        # TODO: maybe use parts instead?
        import modules.madlibs as madlibs
        madlibs.test((config.testables_directory, 
                      config.harness_directory), result, 
                     gtsConfig.tests[name], source, 
                     gtsConfig.environment)
        

# calculate the scores associated with result based on tests
# before applying any potential late penalty
result.calculate_scores()

name = "Proper Number of Inputs"
if name in config.actions and name in gtsConfig.tests:
    # create test object
    t = GalahTest()
    t.name = name
     
    # run test
    import modules.inputcount as inputcount
    completed = inputcount.test((config.testables_directory, config.harness_directory), t, gtsConfig.tests[name], result.score)
    
    # add test to result
    if completed == OK:
        result.add_test(t)

# calculate the scores associated with result based on tests
# before applying any potential late penalty
result.calculate_scores()

name = "Submit Date Check"
if name in config.actions and name in gtsConfig.tests:
    # create test object
    t = GalahTest()
    t.name = name
     
    # run test
    import modules.latecheck as latecheck
    completed = latecheck.test((config.testables_directory, config.harness_directory), t, gtsConfig.tests[name], source, config.submission["timestamp"], config.assignment["due"], result.score, result.max_score)
    
    # add test to result
    if completed == OK:
        result.add_test(t)

# calculate the scores associated with result based on tests
result.calculate_scores()

# min score of 0
if result.score < 0 and result.max_score > 0:
    result.score = 0
elif result.score < 0 and result.max_score == 0:
    result.max_score = abs(result.score)
    result.score = 0


# TODO: should markup conversion occur all at once?
# convert all test messages to have proper markdown for newlines
from system.utils import markup_convert_newline
for test in result.tests:
    test.message = markup_convert_newline(test.message)
    

# send result back to Galah 
result.send()
